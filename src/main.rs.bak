use std::env;
use regex::Regex;

fn main() {
    let args: Vec<String> = env::args().collect();
    if args.len() < 2 {
        eprintln!("Usage: {} <sentence>", args[0]);
        std::process::exit(1);
    }

    let sentence = args[1..].join(" ");
    match spoonerize(&sentence) {
        Some(s) => println!("{}", s),
        None => eprintln!("Couldn't spoonerize the sentence. Need at least two words."),
    }
}

fn spoonerize(sentence: &str) -> Option<String> {
    let words: Vec<&str> = sentence.split_whitespace().collect();
    if words.len() < 2 {
        return None;
    }

    let first_word = words[0];
    let second_word = words[1];

    // Regex to match the leading consonant cluster of a word
    let re = Regex::new(r"^[^aeiouAEIOU]*").unwrap();
    let first_consonants = re.find(first_word)?.as_str();
    let second_consonants = re.find(second_word)?.as_str();

    let spoonerized_first = format!("{}{}", second_consonants, &first_word[first_consonants.len()..]);
    let spoonerized_second = format!("{}{}", first_consonants, &second_word[second_consonants.len()..]);

    let mut new_words = vec![spoonerized_first, spoonerized_second];

    // Convert the rest of the words from &str to String and extend the vector
    let remaining_words: Vec<String> = words[2..].iter().map(|&s| s.to_string()).collect();
    new_words.extend(remaining_words);

    Some(new_words.join(" "))
}

